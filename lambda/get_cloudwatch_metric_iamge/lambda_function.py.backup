from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError


import boto3
import botocore
import json
import logging
import os
import requests


# The base-64 encoded, encrypted key (CiphertextBlob) stored in the kmsEncryptedHookUrl environment variable
# ENCRYPTED_HOOK_URL = os.environ['kmsEncryptedHookUrl']
# The Slack channel to send a message to stored in the slackChannel environment variable
SLACK_CHANNEL = os.environ['slackChannel']



#HOOK_URL = "https://" + boto3.client('kms').decrypt(
#    CiphertextBlob=b64decode(ENCRYPTED_HOOK_URL),
#    EncryptionContext={'LambdaFunctionName': os.environ['AWS_LAMBDA_FUNCTION_NAME']}
#)['Plaintext'].decode('utf-8')


logger = logging.getLogger()
logger.setLevel(logging.INFO)

cloudwatch = boto3.client('cloudwatch')
metric_source = [
    { 
        "metrics": [
            [ 
                "AWS/ApplicationELB", 
                "HealthyHostCount", 
                "TargetGroup", 
                "targetgroup/myAws-myTgb-1M9OUPT2TRQF8/eeae047ed044aef5", 
                "LoadBalancer", 
                "app/myAlb-blue/3eef135a611fb874" 
            ], 
            [ 
                ".",
                ".",
                ".", 
                "targetgroup/myAws-myTgg-F8WPCRQ9ASHM/47812d462b69c625",
                ".", 
                "app/myAlb-green/c3fc649b472e87b3", 
                { 
                    "color": "#2ca02c" 
                } 
            ]
        ],
        "view": "timeSeries",
        "stacked": False,
        "title": "[AVG] HealthyHost Count",
        "stat": "Average", 
        "period": 60, 
        "yAxis": 
        { 
            "right": 
            { 
                "min": 0 
            }, 
            "left": 
            {
                "min": 0 
            }
        },
        "width": 967,
        "height": 250,
        "start": "-PT1H",
        "end": "P0D" 
    }
]


def lambda_handler(event, context):
    channel = SLACK_CHANNEL    
    metric_data = json.dumps(metric_source[0])
    image_data = cloudwatch.get_metric_widget_image(
        MetricWidget=metric_data,
        OutputFormat='png'
    )
    logger.info("channel: " + str(channel))
    image = {'file': image_data['MetricWidgetImage']}
    #logger.info("image: " + str(image))
    slack_params = {
        "filename": "graph.png",
        "token": "lF0cXuHDrLrtclHtKaKvXgzk",  
        "channels": [channel]
    }
    logger.info("slack_param: " + str(slack_params))
    try:
        requests.post("http://slack.com/api/files.upload", data=slack_params, files=image)
        logger.info("Image posted to %s", channel)
    except requests.exceptions.RequestException as e:
        logger.error("Unexpected Error %s", e)



